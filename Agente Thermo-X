{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNQv7HnwQAfZEfierz92DL3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "fbedde6ad17344af8847233c77a51163": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f65c7a9311d84b69a9be3d9a03dadf23",
              "IPY_MODEL_2d1f2b38c9bb426b96b4224dbaba7cb2",
              "IPY_MODEL_f07e8237c6704addb71d4ab834a4fb44"
            ],
            "layout": "IPY_MODEL_d02d02db347f472ba33925e4f7eb47e5"
          }
        },
        "f65c7a9311d84b69a9be3d9a03dadf23": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0cf81d85f2f1437e9c00f2ed68f736a3",
            "placeholder": "​",
            "style": "IPY_MODEL_3f732db6df604ad982084589e5b3b972",
            "value": "Best trial: 10. Best value: 0.077871: 100%"
          }
        },
        "2d1f2b38c9bb426b96b4224dbaba7cb2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8511b1059a2e47c6a1d5b2d7b18808ee",
            "max": 30,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_044388c5ffc64239afef5a01c7a7def2",
            "value": 30
          }
        },
        "f07e8237c6704addb71d4ab834a4fb44": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6d9cdb333f5b46d8b28402c7824f24de",
            "placeholder": "​",
            "style": "IPY_MODEL_526cea41dcbe43efa8e60efafa631380",
            "value": " 30/30 [03:22&lt;00:00,  6.13s/it]"
          }
        },
        "d02d02db347f472ba33925e4f7eb47e5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0cf81d85f2f1437e9c00f2ed68f736a3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3f732db6df604ad982084589e5b3b972": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8511b1059a2e47c6a1d5b2d7b18808ee": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "044388c5ffc64239afef5a01c7a7def2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "6d9cdb333f5b46d8b28402c7824f24de": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "526cea41dcbe43efa8e60efafa631380": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Diegocolares/Tsallis/blob/main/Agente%20Thermo-X\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# === Instalação e importação ===\n",
        "!pip install pandas numpy matplotlib seaborn scikit-learn imbalanced-learn xgboost torch torchvision joblib optuna -q\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split, StratifiedKFold\n",
        "from sklearn.metrics import (classification_report, precision_recall_curve,\n",
        "                            average_precision_score, roc_auc_score,\n",
        "                            ConfusionMatrixDisplay, f1_score, recall_score,\n",
        "                            precision_score, make_scorer)\n",
        "from sklearn.preprocessing import RobustScaler\n",
        "from imblearn.combine import SMOTETomek\n",
        "from imblearn.pipeline import Pipeline\n",
        "from xgboost import XGBClassifier\n",
        "import torch\n",
        "from torch import nn\n",
        "from torch.utils.data import DataLoader, TensorDataset\n",
        "import joblib\n",
        "import optuna\n",
        "from optuna.samplers import TPESampler\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# Configurações de reprodução\n",
        "SEED = 42\n",
        "np.random.seed(SEED)\n",
        "torch.manual_seed(SEED)\n",
        "\n",
        "# === 1. Carregar e preparar dados (versão otimizada) ===\n",
        "def load_data():\n",
        "    df = pd.read_csv(\"creditcard.csv\")\n",
        "\n",
        "    # Amostragem estratificada melhorada\n",
        "    fraud = df[df['Class'] == 1]\n",
        "    normal = df[df['Class'] == 0].sample(n=len(fraud)*100, random_state=SEED)  # Razão 100:1\n",
        "    df = pd.concat([normal, fraud]).sample(frac=1, random_state=SEED).reset_index(drop=True)\n",
        "\n",
        "    # Engenharia de features avançada\n",
        "    df['Amount_log'] = np.log1p(df['Amount'])\n",
        "    df['Time_hour'] = df['Time'] % (24*60*60) / (60*60)\n",
        "\n",
        "    # Features cíclicas melhoradas\n",
        "    df['Time_sin'] = np.sin(2 * np.pi * df['Time_hour']/24)\n",
        "    df['Time_cos'] = np.cos(2 * np.pi * df['Time_hour']/24)\n",
        "\n",
        "    # Features estatísticas por hora\n",
        "    df['Hourly_avg'] = df.groupby('Time_hour')['Amount'].transform('mean')\n",
        "    df['Hourly_std'] = df.groupby('Time_hour')['Amount'].transform('std')\n",
        "\n",
        "    return df\n",
        "\n",
        "df = load_data()\n",
        "print(f\"Dataset shape: {df.shape}\")\n",
        "print(\"Distribuição de classes:\")\n",
        "print(df['Class'].value_counts(normalize=True))\n",
        "\n",
        "# === 2. Cálculo de métricas fractais robusto ===\n",
        "def calculate_fractal_metrics(series, df, window=30):\n",
        "    # Verificação de integridade\n",
        "    if len(series) < window:\n",
        "        raise ValueError(f\"Série temporal muito curta (mínimo {window} pontos)\")\n",
        "\n",
        "    # Cálculos vetorizados otimizados\n",
        "    rolling = series.rolling(window)\n",
        "    stds = rolling.std().dropna()\n",
        "    ranges = (rolling.max() - rolling.min()).dropna()\n",
        "    diffs = series.diff().abs().rolling(window-1).sum().dropna()\n",
        "    sums = rolling.sum().dropna()\n",
        "\n",
        "    # Alinhamento preciso dos índices\n",
        "    min_len = min(len(stds), len(ranges), len(diffs), len(sums))\n",
        "    aligned_index = stds.index[-min_len:]\n",
        "\n",
        "    # Cálculo das métricas\n",
        "    df_metrics = pd.DataFrame({\n",
        "        'ThermalEntropy': np.log(stds.loc[aligned_index] + 1e-6),\n",
        "        'FractalDim': 1 + (np.log(ranges.loc[aligned_index] + 1e-6) / np.log(window)),\n",
        "        'Dissipation': diffs.loc[aligned_index] / (sums.loc[aligned_index] + 1e-6),\n",
        "        'Dissipation_var': series.diff().abs().rolling(10).var().loc[aligned_index],\n",
        "        'Time_sin': df.loc[aligned_index, 'Time_sin'].values,\n",
        "        'Time_cos': df.loc[aligned_index, 'Time_cos'].values,\n",
        "        'Hourly_avg': df.loc[aligned_index, 'Hourly_avg'].values,\n",
        "        'Hourly_std': df.loc[aligned_index, 'Hourly_std'].values,\n",
        "        'Label': df.loc[aligned_index, 'Class'].values\n",
        "    }, index=aligned_index)\n",
        "\n",
        "    df_metrics['AnomalyScore'] = (df_metrics['ThermalEntropy'] *\n",
        "                                 df_metrics['FractalDim'] *\n",
        "                                 df_metrics['Dissipation'])\n",
        "\n",
        "    return df_metrics.dropna()\n",
        "\n",
        "fractal_df = calculate_fractal_metrics(df['Amount_log'], df)\n",
        "print(f\"\\nMétricas fractais shape: {fractal_df.shape}\")\n",
        "print(\"Distribuição nas métricas fractais:\")\n",
        "print(fractal_df['Label'].value_counts(normalize=True))\n",
        "\n",
        "# === 3. Otimização de Hiperparâmetros com Optuna ===\n",
        "def optimize_xgb(X_train, y_train):\n",
        "    def objective(trial):\n",
        "        params = {\n",
        "            'max_depth': trial.suggest_int('max_depth', 3, 9),\n",
        "            'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3, log=True),\n",
        "            'subsample': trial.suggest_float('subsample', 0.6, 1.0),\n",
        "            'colsample_bytree': trial.suggest_float('colsample_bytree', 0.6, 1.0),\n",
        "            'gamma': trial.suggest_float('gamma', 0, 5),\n",
        "            'scale_pos_weight': trial.suggest_float('scale_pos_weight', 10, 100),\n",
        "        }\n",
        "\n",
        "        model = XGBClassifier(\n",
        "            **params,\n",
        "            n_estimators=500,\n",
        "            eval_metric='aucpr',\n",
        "            use_label_encoder=False,\n",
        "            random_state=SEED\n",
        "        )\n",
        "\n",
        "        cv = StratifiedKFold(n_splits=3, shuffle=True, random_state=SEED)\n",
        "        scores = []\n",
        "\n",
        "        for train_idx, val_idx in cv.split(X_train, y_train):\n",
        "            X_tr, X_val = X_train.iloc[train_idx], X_train.iloc[val_idx]\n",
        "            y_tr, y_val = y_train.iloc[train_idx], y_train.iloc[val_idx]\n",
        "\n",
        "            # Balanceamento apenas no fold de treino\n",
        "            smote = SMOTETomek(sampling_strategy=0.5, random_state=SEED)\n",
        "            X_tr_bal, y_tr_bal = smote.fit_resample(X_tr, y_tr)\n",
        "\n",
        "            scaler = RobustScaler()\n",
        "            X_tr_scaled = scaler.fit_transform(X_tr_bal)\n",
        "            X_val_scaled = scaler.transform(X_val)\n",
        "\n",
        "            model.fit(X_tr_scaled, y_tr_bal)\n",
        "            preds = model.predict_proba(X_val_scaled)[:,1]\n",
        "            scores.append(average_precision_score(y_val, preds))\n",
        "\n",
        "        return np.mean(scores)\n",
        "\n",
        "    study = optuna.create_study(\n",
        "        direction='maximize',\n",
        "        sampler=TPESampler(seed=SEED)\n",
        "    )\n",
        "    study.optimize(objective, n_trials=30, show_progress_bar=True)\n",
        "\n",
        "    return study.best_params\n",
        "\n",
        "features = ['ThermalEntropy', 'FractalDim', 'Dissipation', 'AnomalyScore',\n",
        "            'Dissipation_var', 'Time_sin', 'Time_cos', 'Hourly_avg', 'Hourly_std']\n",
        "X = fractal_df[features]\n",
        "y = fractal_df['Label']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y,\n",
        "    stratify=y,\n",
        "    test_size=0.3,\n",
        "    random_state=SEED\n",
        ")\n",
        "\n",
        "print(\"\\nOtimizando XGBoost...\")\n",
        "best_xgb_params = optimize_xgb(X_train, y_train)\n",
        "print(\"Melhores parâmetros encontrados:\")\n",
        "print(best_xgb_params)\n",
        "\n",
        "# Pipeline final com os melhores parâmetros\n",
        "pipeline_xgb = Pipeline([\n",
        "    ('smotetomek', SMOTETomek(sampling_strategy=0.5, random_state=SEED)),\n",
        "    ('scaler', RobustScaler()),\n",
        "    ('classifier', XGBClassifier(\n",
        "        **best_xgb_params,\n",
        "        n_estimators=500,\n",
        "        eval_metric='aucpr',\n",
        "        use_label_encoder=False,\n",
        "        random_state=SEED\n",
        "    ))\n",
        "])\n",
        "\n",
        "print(\"\\nTreinando modelo final...\")\n",
        "pipeline_xgb.fit(X_train, y_train)\n",
        "joblib.dump(pipeline_xgb, 'xgb_fraud_model.pkl')\n",
        "\n",
        "# === 4. Rede Neural com Focal Loss e Early Stopping ===\n",
        "class FocalLoss(nn.Module):\n",
        "    def __init__(self, alpha=0.75, gamma=2):\n",
        "        super().__init__()\n",
        "        self.alpha = alpha\n",
        "        self.gamma = gamma\n",
        "        self.bce = nn.BCEWithLogitsLoss(reduction='none')\n",
        "\n",
        "    def forward(self, inputs, targets):\n",
        "        bce_loss = self.bce(inputs, targets)\n",
        "        p_t = torch.exp(-bce_loss)\n",
        "        focal_loss = self.alpha * (1 - p_t)**self.gamma * bce_loss\n",
        "        return focal_loss.mean()\n",
        "\n",
        "class FraudMLP(nn.Module):\n",
        "    def __init__(self, input_dim):\n",
        "        super().__init__()\n",
        "        self.layers = nn.Sequential(\n",
        "            nn.Linear(input_dim, 128),\n",
        "            nn.BatchNorm1d(128),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.Dropout(0.4),\n",
        "            nn.Linear(128, 64),\n",
        "            nn.BatchNorm1d(64),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.Dropout(0.3),\n",
        "            nn.Linear(64, 32),\n",
        "            nn.BatchNorm1d(32),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.Dropout(0.2),\n",
        "            nn.Linear(32, 1)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.layers(x).squeeze(-1)\n",
        "\n",
        "def prepare_torch_data(X_train, y_train, X_test, y_test):\n",
        "    scaler = RobustScaler()\n",
        "    X_train_scaled = scaler.fit_transform(X_train)\n",
        "    X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "    train_dataset = TensorDataset(\n",
        "        torch.tensor(X_train_scaled, dtype=torch.float32),\n",
        "        torch.tensor(y_train.values, dtype=torch.float32)\n",
        "    )\n",
        "    test_dataset = TensorDataset(\n",
        "        torch.tensor(X_test_scaled, dtype=torch.float32),\n",
        "        torch.tensor(y_test.values, dtype=torch.float32)\n",
        "    )\n",
        "\n",
        "    return train_dataset, test_dataset, scaler\n",
        "\n",
        "train_dataset, test_dataset, scaler = prepare_torch_data(X_train, y_train, X_test, y_test)\n",
        "joblib.dump(scaler, 'scaler.pkl')\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=1024, shuffle=True)\n",
        "test_loader = DataLoader(test_dataset, batch_size=1024)\n",
        "\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "model = FraudMLP(len(features)).to(device)\n",
        "criterion = FocalLoss(alpha=0.75, gamma=2)\n",
        "optimizer = torch.optim.AdamW(model.parameters(), lr=0.001, weight_decay=1e-4)\n",
        "scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'max', patience=3, factor=0.5)\n",
        "\n",
        "def train_model(model, train_loader, test_loader, epochs=50):\n",
        "    best_score = 0\n",
        "    patience = 5\n",
        "    counter = 0\n",
        "\n",
        "    for epoch in range(epochs):\n",
        "        model.train()\n",
        "        train_loss = 0\n",
        "        for xb, yb in train_loader:\n",
        "            xb, yb = xb.to(device), yb.to(device)\n",
        "            optimizer.zero_grad()\n",
        "            outputs = model(xb)\n",
        "            loss = criterion(outputs, yb)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "            train_loss += loss.item() * xb.size(0)\n",
        "\n",
        "        # Avaliação\n",
        "        model.eval()\n",
        "        test_preds, test_targets = [], []\n",
        "        with torch.no_grad():\n",
        "            for xb, yb in test_loader:\n",
        "                xb = xb.to(device)\n",
        "                outputs = model(xb)\n",
        "                preds = torch.sigmoid(outputs).cpu().numpy()\n",
        "                test_preds.append(preds)\n",
        "                test_targets.append(yb.cpu().numpy())\n",
        "\n",
        "        test_preds = np.concatenate(test_preds)\n",
        "        test_targets = np.concatenate(test_targets)\n",
        "        ap_score = average_precision_score(test_targets, test_preds)\n",
        "        scheduler.step(ap_score)\n",
        "\n",
        "        print(f\"Epoch {epoch+1}/{epochs} - Train Loss: {train_loss/len(train_loader.dataset):.4f} - Test AP: {ap_score:.4f}\")\n",
        "\n",
        "        if ap_score > best_score:\n",
        "            best_score = ap_score\n",
        "            torch.save(model.state_dict(), 'mlp_fraud_best.pt')\n",
        "            counter = 0\n",
        "        else:\n",
        "            counter += 1\n",
        "            if counter >= patience:\n",
        "                print(\"Early stopping\")\n",
        "                break\n",
        "\n",
        "print(\"\\nTreinando MLP com Focal Loss...\")\n",
        "train_model(model, train_loader, test_loader)\n",
        "\n",
        "# === 5. Autoencoder para detecção de anomalias ===\n",
        "class FraudAutoencoder(nn.Module):\n",
        "    def __init__(self, input_dim):\n",
        "        super().__init__()\n",
        "        self.encoder = nn.Sequential(\n",
        "            nn.Linear(input_dim, 32),\n",
        "            nn.BatchNorm1d(32),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.Linear(32, 16),\n",
        "            nn.BatchNorm1d(16),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.Linear(16, 8)\n",
        "        )\n",
        "        self.decoder = nn.Sequential(\n",
        "            nn.Linear(8, 16),\n",
        "            nn.BatchNorm1d(16),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.Linear(16, 32),\n",
        "            nn.BatchNorm1d(32),\n",
        "            nn.LeakyReLU(0.1),\n",
        "            nn.Linear(32, input_dim)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        encoded = self.encoder(x)\n",
        "        decoded = self.decoder(encoded)\n",
        "        return decoded\n",
        "\n",
        "# Treinar apenas com exemplos normais\n",
        "normal_indices = y_train[y_train == 0].index\n",
        "X_train_normal = X_train.loc[normal_indices]\n",
        "X_train_normal_scaled = scaler.transform(X_train_normal)\n",
        "\n",
        "ae = FraudAutoencoder(len(features)).to(device)\n",
        "ae_criterion = nn.MSELoss()\n",
        "ae_optimizer = torch.optim.Adam(ae.parameters(), lr=0.001)\n",
        "\n",
        "normal_dataset = TensorDataset(torch.tensor(X_train_normal_scaled, dtype=torch.float32))\n",
        "normal_loader = DataLoader(normal_dataset, batch_size=1024, shuffle=True)\n",
        "\n",
        "print(\"\\nTreinando Autoencoder...\")\n",
        "for epoch in range(30):\n",
        "    ae.train()\n",
        "    total_loss = 0\n",
        "    for xb, in normal_loader:\n",
        "        xb = xb.to(device)\n",
        "        ae_optimizer.zero_grad()\n",
        "        reconstructed = ae(xb)\n",
        "        loss = ae_criterion(reconstructed, xb)\n",
        "        loss.backward()\n",
        "        ae_optimizer.step()\n",
        "        total_loss += loss.item() * xb.size(0)\n",
        "    print(f\"Epoch {epoch+1} - Loss: {total_loss/len(normal_loader.dataset):.6f}\")\n",
        "\n",
        "torch.save(ae.state_dict(), 'fraud_autoencoder.pt')\n",
        "\n",
        "# === 6. Ensemble e Avaliação Final ===\n",
        "def evaluate_ensemble(X_test, y_test, pipeline_xgb, mlp_model, ae_model, scaler, device):\n",
        "    # Pré-processamento\n",
        "    X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "    # Previsões XGBoost\n",
        "    xgb_probs = pipeline_xgb.predict_proba(X_test)[:,1]\n",
        "\n",
        "    # Previsões MLP\n",
        "    X_test_tensor = torch.tensor(X_test_scaled, dtype=torch.float32).to(device)\n",
        "    mlp_model.eval()\n",
        "    with torch.no_grad():\n",
        "        mlp_logits = mlp_model(X_test_tensor)\n",
        "        mlp_probs = torch.sigmoid(mlp_logits).cpu().numpy()\n",
        "\n",
        "    # Erros do Autoencoder\n",
        "    ae_model.eval()\n",
        "    with torch.no_grad():\n",
        "        reconstructed = ae_model(X_test_tensor)\n",
        "        ae_errors = ((reconstructed - X_test_tensor)**2).mean(dim=1).cpu().numpy()\n",
        "    ae_errors_scaled = (ae_errors - ae_errors.min()) / (ae_errors.max() - ae_errors.min() + 1e-6)\n",
        "\n",
        "    # Combinação ponderada\n",
        "    ensemble_scores = 0.5*xgb_probs + 0.4*mlp_probs + 0.1*ae_errors_scaled\n",
        "\n",
        "    # Encontrar melhor threshold\n",
        "    thresholds = np.linspace(0, 1, 200)\n",
        "    f1_scores = [f1_score(y_test, ensemble_scores > t) for t in thresholds]\n",
        "    best_thresh = thresholds[np.argmax(f1_scores)]\n",
        "\n",
        "    return ensemble_scores, best_thresh\n",
        "\n",
        "print(\"\\nAvaliando ensemble...\")\n",
        "ensemble_scores, best_thresh = evaluate_ensemble(\n",
        "    X_test, y_test,\n",
        "    pipeline_xgb, model, ae,\n",
        "    scaler, device\n",
        ")\n",
        "\n",
        "y_pred_ensemble = (ensemble_scores > best_thresh).astype(int)\n",
        "\n",
        "print(\"\\n=== Relatório Final do Ensemble ===\")\n",
        "print(classification_report(y_test, y_pred_ensemble, digits=4))\n",
        "print(f\"Melhor threshold: {best_thresh:.4f}\")\n",
        "print(f\"AUC-PR: {average_precision_score(y_test, ensemble_scores):.4f}\")\n",
        "print(f\"ROC-AUC: {roc_auc_score(y_test, ensemble_scores):.4f}\")\n",
        "\n",
        "# Visualizações finais\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5))\n",
        "\n",
        "ConfusionMatrixDisplay.from_predictions(\n",
        "    y_test, y_pred_ensemble,\n",
        "    display_labels=['Normal', 'Fraude'],\n",
        "    cmap='Blues',\n",
        "    ax=ax1\n",
        ")\n",
        "ax1.set_title('Matriz de Confusão')\n",
        "\n",
        "precision, recall, _ = precision_recall_curve(y_test, ensemble_scores)\n",
        "ax2.plot(recall, precision, label=f'AUC-PR = {average_precision_score(y_test, ensemble_scores):.3f}')\n",
        "ax2.plot([0, 1], [1, 0], '--', color='gray')\n",
        "ax2.set_xlabel('Recall')\n",
        "ax2.set_ylabel('Precision')\n",
        "ax2.set_title('Curva Precision-Recall')\n",
        "ax2.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Salvar modelo final\n",
        "final_model = {\n",
        "    'xgb_model': pipeline_xgb,\n",
        "    'mlp_model': model.state_dict(),\n",
        "    'ae_model': ae.state_dict(),\n",
        "    'scaler': scaler,\n",
        "    'features': features,\n",
        "    'threshold': best_thresh\n",
        "}\n",
        "\n",
        "torch.save(final_model, 'fraud_detection_ensemble.pth')\n",
        "print(\"\\nModelo final salvo como 'fraud_detection_ensemble.pth'\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "fbedde6ad17344af8847233c77a51163",
            "f65c7a9311d84b69a9be3d9a03dadf23",
            "2d1f2b38c9bb426b96b4224dbaba7cb2",
            "f07e8237c6704addb71d4ab834a4fb44",
            "d02d02db347f472ba33925e4f7eb47e5",
            "0cf81d85f2f1437e9c00f2ed68f736a3",
            "3f732db6df604ad982084589e5b3b972",
            "8511b1059a2e47c6a1d5b2d7b18808ee",
            "044388c5ffc64239afef5a01c7a7def2",
            "6d9cdb333f5b46d8b28402c7824f24de",
            "526cea41dcbe43efa8e60efafa631380"
          ]
        },
        "id": "V0_4TXaR91sv",
        "outputId": "3d8ef370-68b3-4d77-96a6-ecee4a6351d7"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/395.9 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m395.9/395.9 kB\u001b[0m \u001b[31m16.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/242.7 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m242.7/242.7 kB\u001b[0m \u001b[31m9.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-07-06 18:20:24,617] A new study created in memory with name: no-name-a390e983-1f78-4355-b60a-198a325f8ad5\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset shape: (49692, 37)\n",
            "Distribuição de classes:\n",
            "Class\n",
            "0    0.990099\n",
            "1    0.009901\n",
            "Name: proportion, dtype: float64\n",
            "\n",
            "Métricas fractais shape: (24911, 10)\n",
            "Distribuição nas métricas fractais:\n",
            "Label\n",
            "0    0.990807\n",
            "1    0.009193\n",
            "Name: proportion, dtype: float64\n",
            "\n",
            "Otimizando XGBoost...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/30 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "fbedde6ad17344af8847233c77a51163"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[I 2025-07-06 18:20:30,202] Trial 0 finished with value: 0.05971100399873841 and parameters: {'max_depth': 5, 'learning_rate': 0.2536999076681772, 'subsample': 0.892797576724562, 'colsample_bytree': 0.8394633936788146, 'gamma': 0.7800932022121826, 'scale_pos_weight': 24.03950683025824}. Best is trial 0 with value: 0.05971100399873841.\n",
            "[I 2025-07-06 18:20:33,816] Trial 1 finished with value: 0.059327014509281274 and parameters: {'max_depth': 3, 'learning_rate': 0.19030368381735815, 'subsample': 0.8404460046972835, 'colsample_bytree': 0.8832290311184181, 'gamma': 0.10292247147901223, 'scale_pos_weight': 97.29188669457949}. Best is trial 0 with value: 0.05971100399873841.\n",
            "[I 2025-07-06 18:20:46,613] Trial 2 finished with value: 0.06745939620823233 and parameters: {'max_depth': 8, 'learning_rate': 0.020589728197687916, 'subsample': 0.6727299868828402, 'colsample_bytree': 0.6733618039413735, 'gamma': 1.5212112147976886, 'scale_pos_weight': 57.228078846901404}. Best is trial 2 with value: 0.06745939620823233.\n",
            "[I 2025-07-06 18:20:55,055] Trial 3 finished with value: 0.0583631478853453 and parameters: {'max_depth': 6, 'learning_rate': 0.02692655251486473, 'subsample': 0.8447411578889518, 'colsample_bytree': 0.6557975442608167, 'gamma': 1.4607232426760908, 'scale_pos_weight': 42.97256589643225}. Best is trial 2 with value: 0.06745939620823233.\n",
            "[I 2025-07-06 18:20:58,387] Trial 4 finished with value: 0.07106595780180798 and parameters: {'max_depth': 6, 'learning_rate': 0.14447746112718687, 'subsample': 0.6798695128633439, 'colsample_bytree': 0.8056937753654446, 'gamma': 2.9620728443102124, 'scale_pos_weight': 14.180537144799796}. Best is trial 4 with value: 0.07106595780180798.\n",
            "[I 2025-07-06 18:21:10,457] Trial 5 finished with value: 0.06524093594159883 and parameters: {'max_depth': 7, 'learning_rate': 0.0178601378893971, 'subsample': 0.6260206371941118, 'colsample_bytree': 0.9795542149013333, 'gamma': 4.828160165372797, 'scale_pos_weight': 82.7557613304815}. Best is trial 4 with value: 0.07106595780180798.\n",
            "[I 2025-07-06 18:21:15,589] Trial 6 finished with value: 0.05301883995938476 and parameters: {'max_depth': 5, 'learning_rate': 0.013940346079873234, 'subsample': 0.8736932106048627, 'colsample_bytree': 0.7760609974958406, 'gamma': 0.6101911742238941, 'scale_pos_weight': 54.56592191001432}. Best is trial 4 with value: 0.07106595780180798.\n",
            "[I 2025-07-06 18:21:21,419] Trial 7 finished with value: 0.054978885212008256 and parameters: {'max_depth': 3, 'learning_rate': 0.22038218939289875, 'subsample': 0.7035119926400067, 'colsample_bytree': 0.8650089137415928, 'gamma': 1.5585553804470549, 'scale_pos_weight': 56.80612190600297}. Best is trial 4 with value: 0.07106595780180798.\n",
            "[I 2025-07-06 18:21:28,553] Trial 8 finished with value: 0.06448957591794993 and parameters: {'max_depth': 6, 'learning_rate': 0.01875220945578641, 'subsample': 0.9878338511058234, 'colsample_bytree': 0.9100531293444458, 'gamma': 4.697494707820946, 'scale_pos_weight': 90.5344615384884}. Best is trial 4 with value: 0.07106595780180798.\n",
            "[I 2025-07-06 18:21:35,127] Trial 9 finished with value: 0.06863600957761028 and parameters: {'max_depth': 7, 'learning_rate': 0.22999586428143728, 'subsample': 0.6353970008207678, 'colsample_bytree': 0.6783931449676581, 'gamma': 0.22613644455269033, 'scale_pos_weight': 39.27972976869379}. Best is trial 4 with value: 0.07106595780180798.\n",
            "[I 2025-07-06 18:21:40,866] Trial 10 finished with value: 0.07787100033832532 and parameters: {'max_depth': 9, 'learning_rate': 0.09925607367639418, 'subsample': 0.747491509088439, 'colsample_bytree': 0.7706620641389771, 'gamma': 3.345357465564295, 'scale_pos_weight': 13.485267996506458}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:21:46,841] Trial 11 finished with value: 0.07231410296857056 and parameters: {'max_depth': 9, 'learning_rate': 0.08757126827307508, 'subsample': 0.7436116925041999, 'colsample_bytree': 0.7518416973680894, 'gamma': 3.472495306853261, 'scale_pos_weight': 10.781743239700228}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:21:50,674] Trial 12 finished with value: 0.0659445238158609 and parameters: {'max_depth': 9, 'learning_rate': 0.08115514534221814, 'subsample': 0.7631674936863566, 'colsample_bytree': 0.7470778234220222, 'gamma': 3.4494521167484593, 'scale_pos_weight': 10.379601234185365}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:21:57,584] Trial 13 finished with value: 0.07057028907966756 and parameters: {'max_depth': 9, 'learning_rate': 0.058261802534285416, 'subsample': 0.7653549721555668, 'colsample_bytree': 0.7300570135729482, 'gamma': 3.8583207162846906, 'scale_pos_weight': 28.96791972793983}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:22:01,462] Trial 14 finished with value: 0.0538074699893219 and parameters: {'max_depth': 9, 'learning_rate': 0.10993383188064196, 'subsample': 0.7521778794931461, 'colsample_bytree': 0.6195496997079633, 'gamma': 2.478699307119166, 'scale_pos_weight': 23.794976071425154}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:22:10,224] Trial 15 finished with value: 0.06321831248215423 and parameters: {'max_depth': 8, 'learning_rate': 0.041290315427491446, 'subsample': 0.7213053192295888, 'colsample_bytree': 0.7322318671941304, 'gamma': 3.9899743453950847, 'scale_pos_weight': 73.44950903175699}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:22:15,015] Trial 16 finished with value: 0.0708744856652126 and parameters: {'max_depth': 8, 'learning_rate': 0.07106226065081256, 'subsample': 0.8095624901101184, 'colsample_bytree': 0.8147224330134453, 'gamma': 2.412804518023923, 'scale_pos_weight': 36.04468440735096}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:22:24,201] Trial 17 finished with value: 0.07717799784984493 and parameters: {'max_depth': 9, 'learning_rate': 0.03897803960375351, 'subsample': 0.9281889012746769, 'colsample_bytree': 0.9429564520037395, 'gamma': 3.308851073086485, 'scale_pos_weight': 17.469370713709097}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:22:30,573] Trial 18 finished with value: 0.06884168924564092 and parameters: {'max_depth': 7, 'learning_rate': 0.03565071440474366, 'subsample': 0.9589103019358121, 'colsample_bytree': 0.9917702367090978, 'gamma': 3.046299781052562, 'scale_pos_weight': 21.51203914294298}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:22:38,616] Trial 19 finished with value: 0.07288397585272667 and parameters: {'max_depth': 8, 'learning_rate': 0.04228679243531473, 'subsample': 0.9172533415086302, 'colsample_bytree': 0.9345000319226199, 'gamma': 4.20268595864156, 'scale_pos_weight': 32.75349410940463}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:22:42,476] Trial 20 finished with value: 0.04224483960803694 and parameters: {'max_depth': 4, 'learning_rate': 0.010969979157020224, 'subsample': 0.935686377932112, 'colsample_bytree': 0.9305059302668455, 'gamma': 2.1810308551851745, 'scale_pos_weight': 48.691835091533264}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:22:50,505] Trial 21 finished with value: 0.06580630336434011 and parameters: {'max_depth': 8, 'learning_rate': 0.04331735781865084, 'subsample': 0.915431142244666, 'colsample_bytree': 0.9255974822311327, 'gamma': 4.265536233439596, 'scale_pos_weight': 31.06862066983671}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:22:58,031] Trial 22 finished with value: 0.0754975073467336 and parameters: {'max_depth': 9, 'learning_rate': 0.030979015428443047, 'subsample': 0.9866718840354081, 'colsample_bytree': 0.9610628594861361, 'gamma': 4.3804031160810055, 'scale_pos_weight': 18.83532831841132}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:23:09,041] Trial 23 finished with value: 0.07603036450577265 and parameters: {'max_depth': 9, 'learning_rate': 0.028287911214840828, 'subsample': 0.9924851454100139, 'colsample_bytree': 0.9611077406366768, 'gamma': 3.0188268058547294, 'scale_pos_weight': 18.27981188739386}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:23:16,340] Trial 24 finished with value: 0.07150977331119804 and parameters: {'max_depth': 9, 'learning_rate': 0.05609840592864526, 'subsample': 0.9531085665736652, 'colsample_bytree': 0.8817094430623266, 'gamma': 2.976938222867891, 'scale_pos_weight': 14.714324099123608}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:23:19,544] Trial 25 finished with value: 0.06503209762872494 and parameters: {'max_depth': 7, 'learning_rate': 0.11972731521359778, 'subsample': 0.9984901537620982, 'colsample_bytree': 0.8423538641125231, 'gamma': 3.4385015146003313, 'scale_pos_weight': 27.161740047247797}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:23:30,798] Trial 26 finished with value: 0.07209074045173287 and parameters: {'max_depth': 8, 'learning_rate': 0.02514884691123444, 'subsample': 0.8057701743628458, 'colsample_bytree': 0.9476077563455207, 'gamma': 2.776916348337399, 'scale_pos_weight': 19.032358201662554}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:23:36,214] Trial 27 finished with value: 0.07731631856085941 and parameters: {'max_depth': 9, 'learning_rate': 0.06875917247537355, 'subsample': 0.8657496546179884, 'colsample_bytree': 0.9022399824483678, 'gamma': 1.908247057989068, 'scale_pos_weight': 44.93896511344943}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:23:44,209] Trial 28 finished with value: 0.07461003993859303 and parameters: {'max_depth': 8, 'learning_rate': 0.06652075332868554, 'subsample': 0.8646983892977661, 'colsample_bytree': 0.9030941813063121, 'gamma': 2.0059731693758387, 'scale_pos_weight': 42.303003317322926}. Best is trial 10 with value: 0.07787100033832532.\n",
            "[I 2025-07-06 18:23:47,336] Trial 29 finished with value: 0.061181888417872594 and parameters: {'max_depth': 5, 'learning_rate': 0.2974293928652367, 'subsample': 0.892612306470799, 'colsample_bytree': 0.8403290430144409, 'gamma': 1.0377188213392234, 'scale_pos_weight': 70.12754888435589}. Best is trial 10 with value: 0.07787100033832532.\n",
            "Melhores parâmetros encontrados:\n",
            "{'max_depth': 9, 'learning_rate': 0.09925607367639418, 'subsample': 0.747491509088439, 'colsample_bytree': 0.7706620641389771, 'gamma': 3.345357465564295, 'scale_pos_weight': 13.485267996506458}\n",
            "\n",
            "Treinando modelo final...\n",
            "\n",
            "Treinando MLP com Focal Loss...\n",
            "Epoch 1/50 - Train Loss: 0.1186 - Test AP: 0.0102\n",
            "Epoch 2/50 - Train Loss: 0.0706 - Test AP: 0.0104\n",
            "Epoch 3/50 - Train Loss: 0.0488 - Test AP: 0.0108\n",
            "Epoch 4/50 - Train Loss: 0.0359 - Test AP: 0.0120\n",
            "Epoch 5/50 - Train Loss: 0.0282 - Test AP: 0.0125\n",
            "Epoch 6/50 - Train Loss: 0.0234 - Test AP: 0.0152\n",
            "Epoch 7/50 - Train Loss: 0.0204 - Test AP: 0.0150\n",
            "Epoch 8/50 - Train Loss: 0.0185 - Test AP: 0.0140\n",
            "Epoch 9/50 - Train Loss: 0.0168 - Test AP: 0.0154\n",
            "Epoch 10/50 - Train Loss: 0.0158 - Test AP: 0.0157\n",
            "Epoch 11/50 - Train Loss: 0.0150 - Test AP: 0.0165\n",
            "Epoch 12/50 - Train Loss: 0.0147 - Test AP: 0.0171\n",
            "Epoch 13/50 - Train Loss: 0.0141 - Test AP: 0.0196\n",
            "Epoch 14/50 - Train Loss: 0.0141 - Test AP: 0.0232\n",
            "Epoch 15/50 - Train Loss: 0.0135 - Test AP: 0.0191\n",
            "Epoch 16/50 - Train Loss: 0.0137 - Test AP: 0.0222\n",
            "Epoch 17/50 - Train Loss: 0.0137 - Test AP: 0.0261\n",
            "Epoch 18/50 - Train Loss: 0.0132 - Test AP: 0.0250\n",
            "Epoch 19/50 - Train Loss: 0.0135 - Test AP: 0.0268\n",
            "Epoch 20/50 - Train Loss: 0.0136 - Test AP: 0.0159\n",
            "Epoch 21/50 - Train Loss: 0.0132 - Test AP: 0.0170\n",
            "Epoch 22/50 - Train Loss: 0.0131 - Test AP: 0.0272\n",
            "Epoch 23/50 - Train Loss: 0.0127 - Test AP: 0.0317\n",
            "Epoch 24/50 - Train Loss: 0.0128 - Test AP: 0.0313\n",
            "Epoch 25/50 - Train Loss: 0.0131 - Test AP: 0.0320\n",
            "Epoch 26/50 - Train Loss: 0.0128 - Test AP: 0.0265\n",
            "Epoch 27/50 - Train Loss: 0.0129 - Test AP: 0.0258\n",
            "Epoch 28/50 - Train Loss: 0.0130 - Test AP: 0.0248\n",
            "Epoch 29/50 - Train Loss: 0.0129 - Test AP: 0.0256\n",
            "Epoch 30/50 - Train Loss: 0.0131 - Test AP: 0.0256\n",
            "Early stopping\n",
            "\n",
            "Treinando Autoencoder...\n",
            "Epoch 1 - Loss: 1.215951\n",
            "Epoch 2 - Loss: 0.669090\n",
            "Epoch 3 - Loss: 0.464028\n",
            "Epoch 4 - Loss: 0.337479\n",
            "Epoch 5 - Loss: 0.257459\n",
            "Epoch 6 - Loss: 0.220995\n",
            "Epoch 7 - Loss: 0.183626\n",
            "Epoch 8 - Loss: 0.167078\n",
            "Epoch 9 - Loss: 0.147255\n",
            "Epoch 10 - Loss: 0.141618\n",
            "Epoch 11 - Loss: 0.128292\n",
            "Epoch 12 - Loss: 0.125061\n",
            "Epoch 13 - Loss: 0.107344\n",
            "Epoch 14 - Loss: 0.106754\n",
            "Epoch 15 - Loss: 0.102122\n",
            "Epoch 16 - Loss: 0.094451\n",
            "Epoch 17 - Loss: 0.087360\n",
            "Epoch 18 - Loss: 0.084937\n",
            "Epoch 19 - Loss: 0.077377\n",
            "Epoch 20 - Loss: 0.073684\n",
            "Epoch 21 - Loss: 0.089972\n",
            "Epoch 22 - Loss: 0.066782\n",
            "Epoch 23 - Loss: 0.071664\n",
            "Epoch 24 - Loss: 0.058770\n",
            "Epoch 25 - Loss: 0.060141\n",
            "Epoch 26 - Loss: 0.051065\n",
            "Epoch 27 - Loss: 0.053790\n",
            "Epoch 28 - Loss: 0.053345\n",
            "Epoch 29 - Loss: 0.050129\n",
            "Epoch 30 - Loss: 0.045320\n",
            "\n",
            "Avaliando ensemble...\n",
            "\n",
            "=== Relatório Final do Ensemble ===\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0     0.9918    0.9920    0.9919      7405\n",
            "           1     0.1194    0.1159    0.1176        69\n",
            "\n",
            "    accuracy                         0.9839      7474\n",
            "   macro avg     0.5556    0.5540    0.5548      7474\n",
            "weighted avg     0.9837    0.9839    0.9838      7474\n",
            "\n",
            "Melhor threshold: 0.4221\n",
            "AUC-PR: 0.0577\n",
            "ROC-AUC: 0.6422\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x500 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Modelo final salvo como 'fraud_detection_ensemble.pth'\n"
          ]
        }
      ]
    }
  ]
}